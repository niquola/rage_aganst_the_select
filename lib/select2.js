// Generated by CoffeeScript 1.5.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function($) {
    var KEY, Observable, SelectController, SelectModel, SelectView;
    KEY = {
      TAB: 9,
      ENTER: 13,
      ESC: 27,
      SPACE: 32,
      LEFT: 37,
      UP: 38,
      RIGHT: 39,
      DOWN: 40,
      SHIFT: 16,
      CTRL: 17,
      ALT: 18,
      PAGE_UP: 33,
      PAGE_DOWN: 34,
      HOME: 36,
      END: 35,
      BACKSPACE: 8,
      DELETE: 46
    };
    Observable = (function() {

      function Observable(attrs) {
        this.attrs = attrs;
      }

      return Observable;

    })();
    SelectModel = (function(_super) {

      __extends(SelectModel, _super);

      function SelectModel(data) {
        this.data = data;
        this._hg = 0;
      }

      SelectModel.prototype.activate = function() {
        this._active = true;
        $(this).trigger('activated');
        this.open();
        return this.filter();
      };

      SelectModel.prototype.open = function() {
        return $(this).trigger('open');
      };

      SelectModel.prototype.inactivate = function() {
        this._active = false;
        $(this).trigger('inactivated');
        return this.close();
      };

      SelectModel.prototype.filter = function(term) {
        this.filtered_data = this.data;
        if (term) {
          this.filtered_data = this.data.filter(function(i) {
            return i.indexOf(term) > -1;
          });
        }
        return $(this).trigger('results', [this.filtered_data]);
      };

      SelectModel.prototype.close = function() {
        return $(this).trigger('close');
      };

      SelectModel.prototype.setValue = function(val) {
        this._val = val;
        $(this).trigger('valueChanged', [this._val]);
        return this.close();
      };

      SelectModel.prototype.next = function() {
        this._hg += 1;
        return $(this).trigger('highlight', [this.data[this._hg]]);
      };

      SelectModel.prototype.prev = function() {
        this._hg -= 1;
        return $(this).trigger('highlight', [this.data[this._hg]]);
      };

      return SelectModel;

    })(Observable);
    SelectView = (function() {

      function SelectView(node) {
        this.showResults = __bind(this.showResults, this);
        this.onKeypress = __bind(this.onKeypress, this);        this.node = $(node);
        this.render();
      }

      SelectView.prototype.containerClass = (function() {
        return 'select2-container';
      });

      SelectView.prototype.containerWidth = (function() {
        return 300;
      });

      SelectView.prototype.render = function() {
        return this.createDom();
      };

      SelectView.prototype.createDom = function() {
        this._container = $('<div></div>', {
          "class": 'select2-container'
        }).insertAfter(this.node);
        this.createFocusNode();
        this.createDropdown();
        return this.createHidden();
      };

      SelectView.prototype.createFocusNode = function() {
        var _this = this;
        this._focusNode = $("<input></input>", {
          "type": 'text'
        }).appendTo(this._container);
        this._focusNode.on('focus', function() {
          return $(_this).trigger('focus');
        });
        this._focusNode.on('keydown', this.onKeypress);
        return this._focusNode.on('input', function(ev) {
          return $(_this).trigger('input', [_this._focusNode.val()]);
        });
      };

      SelectView.prototype.onKeypress = function(e) {
        switch (e.which) {
          case KEY.UP:
            return $(this).trigger('prev');
          case KEY.DOWN:
            return $(this).trigger('next');
        }
      };

      SelectView.prototype.createDropdown = function() {
        var self;
        this.dropdownNode = $('<ul></ul>', {
          "class": 'dropdown-menu'
        }).appendTo(this._container);
        this.hidePopup();
        self = this;
        return this.dropdownNode.delegate('a', 'click', function() {
          return $(self).trigger('selection', [$(this).text()]);
        });
      };

      SelectView.prototype.createHidden = function() {
        return this.hiddenNode = $('<span></span>', {
          html: 'ups'
        }).appendTo(this._container);
      };

      SelectView.prototype.setValue = function(val) {
        return this.hiddenNode.text("Value: " + val);
      };

      SelectView.prototype.active = function() {
        return this.dropdownNode.addClass('active');
      };

      SelectView.prototype.inactive = function() {
        return this.dropdownNode.removeClass('active');
      };

      SelectView.prototype.showResults = function(ev, items) {
        var html, item;
        html = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            _results.push(this.itemLine(item));
          }
          return _results;
        }).call(this);
        return this.dropdownNode.html(html.join(''));
      };

      SelectView.prototype.showPopup = function() {
        return this.dropdownNode.show();
      };

      SelectView.prototype.hidePopup = function() {
        return this.dropdownNode.hide();
      };

      SelectView.prototype.itemLine = function(item) {
        return "<li><a href='#'>" + item + "</a></li>";
      };

      SelectView.prototype.highlight = function(item) {
        this.dropdownNode.find('a.active').removeClass('active');
        console.log("a[text='" + item + "']");
        return console.log(this.dropdownNode.find("a[text='" + item + "']").addClass('active'));
      };

      return SelectView;

    })();
    SelectController = (function() {

      function SelectController(node) {
        var data,
          _this = this;
        this.node = node;
        this.dispatchKeypress = __bind(this.dispatchKeypress, this);
        data = ['one', 'two', 'three'];
        this.model = new SelectModel(data);
        this.view = new SelectView(this.node);
        $(this.view).on('focus', (function() {
          return _this.model.activate();
        }));
        $(this.view).on('blur', (function() {
          return _this.model.inactivate();
        }));
        $(this.view).on('input', this.dispatchKeypress);
        $(this.view).on('selection', function(ev, val) {
          return _this.model.setValue(val);
        });
        $(this.view).on('prev', function(ev, val) {
          return _this.model.prev();
        });
        $(this.view).on('next', function(ev, val) {
          return _this.model.next();
        });
        $(this.model).on('activated', (function() {
          return _this.view.active();
        }));
        $(this.model).on('inactivated', (function() {
          return _this.view.inactive();
        }));
        $(this.model).on('open', (function() {
          return _this.view.showPopup();
        }));
        $(this.model).on('close', (function() {
          return _this.view.hidePopup();
        }));
        $(this.model).on('results', this.view.showResults);
        $(this.model).on('valueChanged', (function(ev, val) {
          return _this.view.setValue(val);
        }));
        $(this.model).on('highlight', (function(ev, item) {
          return _this.view.highlight(item);
        }));
      }

      SelectController.prototype.dispatchKeypress = function(_, val) {
        return this.model.filter(val);
      };

      return SelectController;

    })();
    return $.fn.select2 = function() {
      return $(this).each(function() {
        var cnt;
        return cnt = new SelectController(this);
      });
    };
  })(jQuery);

}).call(this);
