// Generated by CoffeeScript 1.5.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function($) {
    var Observable, SelectModel;
    Observable = (function() {

      function Observable(attrs) {
        this.attrs = attrs;
      }

      return Observable;

    })();
    SelectModel = (function(_super) {

      __extends(SelectModel, _super);

      function SelectModel(data) {
        var i, item;
        this.data = data;
        i = -1;
        this.items = (function() {
          var _i, _len, _ref, _results;
          _ref = this.data;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            _results.push({
              data: item,
              _id: (i = i + 1)
            });
          }
          return _results;
        }).call(this);
        this.selected_item_index = 0;
      }

      SelectModel.prototype.activate = function() {
        this._active = true;
        $(this).trigger('activated');
        this.open();
        return this.filter();
      };

      SelectModel.prototype.open = function() {
        return $(this).trigger('open');
      };

      SelectModel.prototype.inactivate = function() {
        this._active = false;
        $(this).trigger('inactivated');
        return this.close();
      };

      SelectModel.prototype.filter = function(term) {
        this.filtered_items = this.items;
        if (term) {
          this.filtered_items = this.items.filter(function(i) {
            return i.data.indexOf(term) > -1;
          });
        }
        return $(this).trigger('results', [this.filtered_items]);
      };

      SelectModel.prototype.close = function() {
        return $(this).trigger('close');
      };

      SelectModel.prototype.setValue = function(id) {
        this.value = this.items[id];
        $(this).trigger('valueChanged', [this.value]);
        return this.close();
      };

      SelectModel.prototype.next = function() {
        this.selected_item_index += 1;
        return $(this).trigger('highlight', [this.filtered_items[this.selected_item_index]]);
      };

      SelectModel.prototype.prev = function() {
        this.selected_item_index -= 1;
        return $(this).trigger('highlight', [this.filtered_items[this.selected_item_index]]);
      };

      return SelectModel;

    })(Observable);
    return window.SelectModel = SelectModel;
  })(jQuery);

}).call(this);
