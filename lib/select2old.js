// Generated by CoffeeScript 1.5.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function($, undefined_) {
    var AbstractSelect2, KEY, MultiSelect2, SingleSelect2, ajax, debounce, equal, getSideBorderPadding, indexOf, installDebouncedScroll, installFilteredMouseMove, installKeyUpChangeEvent, killEvent, local, measureTextWidth, splitVal, tags;
    indexOf = function(value, array) {
      var i, l, v;
      i = 0;
      l = array.length;
      v = void 0;
      if (typeof value === "undefined") {
        return -1;
      }
      if (value.constructor === String) {
        while (i < l) {
          if (value.localeCompare(array[i]) === 0) {
            return i;
          }
          i = i + 1;
        }
      } else {
        while (i < l) {
          v = array[i];
          if (v.constructor === String) {
            if (v.localeCompare(value) === 0) {
              return i;
            }
          } else {
            if (v === value) {
              return i;
            }
          }
          i = i + 1;
        }
      }
      return -1;
    };
    /*
    Compares equality of a and b taking into account that a and b may be strings, in which case localCompare is used
    @param a
    @param b
    */

    equal = function(a, b) {
      if (a === b) {
        return true;
      }
      if (a === undefined || b === undefined) {
        return false;
      }
      if (a === null || b === null) {
        return false;
      }
      if (a.constructor === String) {
        return a.localeCompare(b) === 0;
      }
      if (b.constructor === String) {
        return b.localeCompare(a) === 0;
      }
      return false;
    };
    /*
    Splits the string into an array of values, trimming each value. An empty array is returned for nulls or empty
    strings
    @param string
    @param separator
    */

    splitVal = function(string, separator) {
      var val, _i, _len, _ref, _results;
      if (!string) {
        return [];
      }
      _ref = string.split(separator);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        val = _ref[_i];
        _results.push($.trim(val));
      }
      return _results;
    };
    getSideBorderPadding = function(element) {
      return element.outerWidth() - element.width();
    };
    installKeyUpChangeEvent = function(element) {
      element.bind("keydown", function() {
        return element.data("keyup-change-value", element.val());
      });
      return element.bind("keyup", function() {
        if (element.val() !== element.data("keyup-change-value")) {
          return element.trigger("keyup-change");
        }
      });
    };
    /*
    filters mouse events so an event is fired only if the mouse moved.
    
    filters out mouse events that occur when mouse is stationary but
    the elements under the pointer are scrolled.
    */

    installFilteredMouseMove = function(element) {
      return element.bind("mousemove", function(e) {
        var lastpos;
        lastpos = $(document).data("select2-lastpos");
        if (lastpos === undefined || lastpos.x !== e.pageX || lastpos.y !== e.pageY) {
          return $(e.target).trigger("mousemove-filtered", e);
        }
      });
    };
    /*
    Debounces a function. Returns a function that calls the original fn function only if no invocations have been made
    within the last quietMillis milliseconds.
    
    @param quietMillis number of milliseconds to wait before invoking fn
    @param fn function to be debounced
    @return debounced version of fn
    */

    debounce = function(quietMillis, fn) {
      var timeout;
      timeout = void 0;
      return function() {
        window.clearTimeout(timeout);
        return timeout = window.setTimeout(fn, quietMillis);
      };
    };
    installDebouncedScroll = function(threshold, element) {
      var notify;
      notify = debounce(threshold, function(e) {
        return element.trigger("scroll-debounced", e);
      });
      return element.bind("scroll", function(e) {
        if (indexOf(e.target, element.get()) >= 0) {
          return notify(e);
        }
      });
    };
    killEvent = function(event) {
      event.preventDefault();
      return event.stopPropagation();
    };
    measureTextWidth = function(e) {
      var sizer, width;
      sizer = void 0;
      width = void 0;
      sizer = $("<div></div>").css({
        position: "absolute",
        left: "-1000px",
        top: "-1000px",
        display: "none",
        fontSize: e.css("fontSize"),
        fontFamily: e.css("fontFamily"),
        fontStyle: e.css("fontStyle"),
        fontWeight: e.css("fontWeight"),
        letterSpacing: e.css("letterSpacing"),
        textTransform: e.css("textTransform"),
        whiteSpace: "nowrap"
      });
      sizer.text(e.val());
      $("body").append(sizer);
      width = sizer.width();
      sizer.remove();
      return width;
    };
    /*
    Produces an ajax-based query function
    
    @param options object containing configuration paramters
    @param options.transport function that will be used to execute the ajax request. must be compatible with parameters supported by $.ajax
    @param options.url url for the data
    @param options.data a function(searchTerm, pageNumber) that should return an object containing query string parameters for the above url.
    @param options.dataType request data type: ajax, jsonp, other datatatypes supported by jQuery's $.ajax function or the transport function if specified
    @param options.quietMillis (optional) milliseconds to wait before making the ajaxRequest, helps debounce the ajax function if invoked too often
    @param options.results a function(remoteData, pageNumber) that converts data returned form the remote request to the format expected by Select2.
    The expected format is an object containing the following keys:
    results array of objects that will be used as choices
    more (optional) boolean indicating whether there are more results available
    Example: {results:[{id:1, text:'Red'},{id:2, text:'Blue'}], more:true}
    */

    ajax = function(options) {
      var handler, quietMillis, requestSequence, timeout;
      timeout = void 0;
      requestSequence = 0;
      handler = null;
      quietMillis = options.quietMillis || 100;
      return function(query) {
        window.clearTimeout(timeout);
        return timeout = window.setTimeout(function() {
          var data, requestNumber, transport;
          requestSequence += 1;
          requestNumber = requestSequence;
          data = options.data;
          transport = options.transport || $.ajax;
          data = data.call(this, query.term, query.page);
          if (null !== handler) {
            handler.abort();
          }
          return handler = transport.call(null, {
            url: options.url,
            dataType: options.dataType,
            data: data,
            success: function(data) {
              if (requestNumber < requestSequence) {
                return;
              }
              return query.callback(options.results(data, query.page));
            }
          });
        }, quietMillis);
      };
    };
    /*
    Produces a query function that works with a local array
    
    @param options object containing configuration parameters. The options parameter can either be an array or an
    object.
    
    If the array form is used it is assumed that it contains objects with 'id' and 'text' keys.
    
    If the object form is used ti is assumed that it contains 'data' and 'text' keys. The 'data' key should contain
    an array of objects that will be used as choices. These objects must contain at least an 'id' key. The 'text'
    key can either be a String in which case it is expected that each element in the 'data' array has a key with the
    value of 'text' which will be used to match choices. Alternatively, text can be a function(item) that can extract
    the text.
    */

    local = function(options) {
      var data, text;
      data = options;
      text = function(item) {
        return "" + item.text;
      };
      if (!$.isArray(data)) {
        text = data.text;
        if (!$.isFunction(text)) {
          text = function(item) {
            return item[data.text];
          };
        }
        data = data.results;
      }
      return function(query) {
        var filtered, t;
        t = query.term.toUpperCase();
        filtered = {};
        if (t === "") {
          query.callback({
            results: data
          });
          return;
        }
        filtered.results = $(data).filter(function() {
          return text(this).toUpperCase().indexOf(t) >= 0;
        }).get();
        return query.callback(filtered);
      };
    };
    tags = function(data) {
      if ($.isFunction(data)) {
        return data;
      }
      return function(query) {
        var filtered, t;
        t = query.term.toUpperCase();
        filtered = {
          results: []
        };
        $(data).each(function() {
          var isObject, text;
          isObject = this.text !== undefined;
          text = (isObject ? this.text : this);
          if (t === "" || text.toUpperCase().indexOf(t) >= 0) {
            return filtered.results.push((isObject ? this : {
              id: this,
              text: this
            }));
          }
        });
        return query.callback(filtered);
      };
    };
    /*
    blurs any Select2 container that has focus when an element outside them was clicked or received focus
    */

    /*
    Creates a new class
    
    @param superClass
    @param methods
    */

    "use strict";
    if (window.Select2 !== undefined) {
      return;
    }
    KEY = void 0;
    AbstractSelect2 = void 0;
    SingleSelect2 = void 0;
    MultiSelect2 = void 0;
    KEY = {
      TAB: 9,
      ENTER: 13,
      ESC: 27,
      SPACE: 32,
      LEFT: 37,
      UP: 38,
      RIGHT: 39,
      DOWN: 40,
      SHIFT: 16,
      CTRL: 17,
      ALT: 18,
      PAGE_UP: 33,
      PAGE_DOWN: 34,
      HOME: 36,
      END: 35,
      BACKSPACE: 8,
      DELETE: 46,
      isArrow: function(k) {
        k = (k.which ? k.which : k);
        switch (k) {
          case KEY.LEFT:
          case KEY.RIGHT:
          case KEY.UP:
          case KEY.DOWN:
            return true;
        }
        return false;
      },
      isControl: function(k) {
        k = (k.which ? k.which : k);
        switch (k) {
          case KEY.SHIFT:
          case KEY.CTRL:
          case KEY.ALT:
            return true;
        }
        return false;
      },
      isFunctionKey: function(k) {
        k = (k.which ? k.which : k);
        return k >= 112 && k <= 123;
      }
    };
    $(document).delegate("*", "mousemove", function(e) {
      return $(document).data("select2-lastpos", {
        x: e.pageX,
        y: e.pageY
      });
    });
    $(document).ready(function() {
      return $(document).delegate("*", "mousedown focusin", function(e) {
        var target;
        target = $(e.target).closest("div.select2-container").get(0);
        return $(document).find("div.select2-container-active").each(function() {
          if (this !== target) {
            return $(this).data("select2").blur();
          }
        });
      });
    });
    AbstractSelect2 = (function() {

      function AbstractSelect2() {}

      AbstractSelect2.prototype.bind = function(func) {
        var self;
        self = this;
        return function() {
          return func.apply(self, arguments);
        };
      };

      AbstractSelect2.prototype.init = function(opts) {
        var results, resultsSelector, search;
        results = void 0;
        search = void 0;
        resultsSelector = ".select2-results";
        this.opts = opts = this.prepareOpts(opts);
        this.id = opts.id;
        if (opts.element.data("select2") !== undefined && opts.element.data("select2") !== null) {
          this.destroy();
        }
        this.container = this.createContainer();
        if (opts.element.attr("class") !== undefined) {
          this.container.addClass(opts.element.attr("class"));
        }
        this.opts.element.data("select2", this).hide().after(this.container);
        this.container.data("select2", this);
        this.dropdown = this.container.find(".select2-drop");
        this.results = results = this.container.find(resultsSelector);
        this.search = search = this.container.find("input[type=text]");
        this.resultsPage = 0;
        this.initContainer();
        installFilteredMouseMove(this.results);
        this.container.delegate(resultsSelector, "mousemove-filtered", this.bind(this.highlightUnderEvent));
        installDebouncedScroll(80, this.results);
        this.container.delegate(resultsSelector, "scroll-debounced", this.bind(this.loadMoreIfNeeded));
        if ($.fn.mousewheel) {
          results.mousewheel(function(e, delta, deltaX, deltaY) {
            var height, top;
            top = results.scrollTop();
            height = void 0;
            if (deltaY > 0 && top - deltaY <= 0) {
              results.scrollTop(0);
              return killEvent(e);
            } else if (deltaY < 0 && results.get(0).scrollHeight - results.scrollTop() + deltaY <= results.height()) {
              results.scrollTop(results.get(0).scrollHeight - results.height());
              return killEvent(e);
            }
          });
        }
        installKeyUpChangeEvent(search);
        search.bind("keyup-change", this.bind(this.updateResults));
        search.bind("focus", function() {
          return search.addClass("select2-focused");
        });
        search.bind("blur", function() {
          return search.removeClass("select2-focused");
        });
        this.container.delegate(resultsSelector, "click", this.bind(function(e) {
          if ($(e.target).closest(".select2-result:not(.select2-disabled)").length > 0) {
            this.highlightUnderEvent(e);
            return this.selectHighlighted(e);
          } else {
            killEvent(e);
            return this.focusSearch();
          }
        }));
        if ($.isFunction(this.opts.initSelection)) {
          this.initSelection();
          return this.monitorSource();
        }
      };

      AbstractSelect2.prototype.destroy = function() {
        var select2;
        select2 = this.opts.element.data("select2");
        if (select2 !== undefined) {
          select2.container.remove();
          return select2.opts.element.removeData("select2").unbind(".select2").show();
        }
      };

      AbstractSelect2.prototype.prepareOpts = function(opts) {
        var element, idKey, select;
        element = void 0;
        select = void 0;
        idKey = void 0;
        element = opts.element;
        if (element.get(0).tagName.toLowerCase() === "select") {
          this.select = select = opts.element;
        }
        if (select) {
          $.each(["id", "multiple", "ajax", "query", "createSearchChoice", "initSelection", "data", "tags"], function() {
            if (this in opts) {
              throw new Error("Option '" + this + "' is not allowed for Select2 when attached to a <select> element.");
            }
          });
        }
        opts = $.extend({}, {
          formatResult: function(data) {
            return data.text;
          },
          formatSelection: function(data) {
            return data.text;
          },
          formatNoMatches: function() {
            return "No matches found";
          },
          formatInputTooShort: function(input, min) {
            return "Please enter " + (min - input.length) + " more characters";
          },
          minimumResultsForSearch: 0,
          minimumInputLength: 0,
          id: function(e) {
            return e.id;
          }
        }, opts);
        if (typeof opts.id !== "function") {
          idKey = opts.id;
          opts.id = function(e) {
            return e[idKey];
          };
        }
        if (select) {
          opts.query = this.bind(function(query) {
            var data, placeholder, term;
            data = {
              results: [],
              more: false
            };
            term = query.term.toUpperCase();
            placeholder = this.getPlaceholder();
            element.find("option").each(function(i) {
              var e, text;
              e = $(this);
              text = e.text();
              if (i === 0 && placeholder !== undefined && text === "") {
                return true;
              }
              if (text.toUpperCase().indexOf(term) >= 0) {
                return data.results.push({
                  id: e.attr("value"),
                  text: text
                });
              }
            });
            return query.callback(data);
          });
          opts.id = function(e) {
            return e.id;
          };
        } else {
          if (!("query" in opts)) {
            if ("ajax" in opts) {
              opts.query = ajax(opts.ajax);
            } else if ("data" in opts) {
              opts.query = local(opts.data);
            } else if ("tags" in opts) {
              opts.query = tags(opts.tags);
              opts.createSearchChoice = function(term) {
                return {
                  id: term,
                  text: term
                };
              };
              opts.initSelection = function(element) {
                var data;
                data = [];
                $(splitVal(element.val(), ",")).each(function() {
                  return data.push({
                    id: this,
                    text: this
                  });
                });
                return data;
              };
            }
          }
        }
        if (typeof opts.query !== "function") {
          throw "query function not defined for Select2 " + opts.element.attr("id");
        }
        return opts;
      };

      /*
      Monitor the original element for changes and update select2 accordingly
      */


      AbstractSelect2.prototype.monitorSource = function() {
        return this.opts.element.bind("change.select2", this.bind(function(e) {
          if (this.opts.element.data("select2-change-triggered") !== true) {
            return this.initSelection();
          }
        }));
      };

      /*
      Triggers the change event on the source element
      */


      AbstractSelect2.prototype.triggerChange = function() {
        this.opts.element.data("select2-change-triggered", true);
        this.opts.element.trigger("change");
        return this.opts.element.data("select2-change-triggered", false);
      };

      AbstractSelect2.prototype.opened = function() {
        return this.container.hasClass("select2-dropdown-open");
      };

      AbstractSelect2.prototype.open = function() {
        if (this.opened()) {
          return;
        }
        this.container.addClass("select2-dropdown-open").addClass("select2-container-active");
        this.updateResults(true);
        this.dropdown.show();
        this.ensureHighlightVisible();
        return this.focusSearch();
      };

      AbstractSelect2.prototype.close = function() {
        if (!this.opened()) {
          return;
        }
        this.dropdown.hide();
        this.container.removeClass("select2-dropdown-open");
        this.results.empty();
        return this.clearSearch();
      };

      AbstractSelect2.prototype.clearSearch = function() {};

      AbstractSelect2.prototype.ensureHighlightVisible = function() {
        var child, children, hb, index, more, rb, results, y;
        results = this.results;
        children = void 0;
        index = void 0;
        child = void 0;
        hb = void 0;
        rb = void 0;
        y = void 0;
        more = void 0;
        children = results.children(".select2-result");
        index = this.highlight();
        if (index < 0) {
          return;
        }
        child = $(children[index]);
        hb = child.offset().top + child.outerHeight();
        if (index === children.length - 1) {
          more = results.find("li.select2-more-results");
          if (more.length > 0) {
            hb = more.offset().top + more.outerHeight();
          }
        }
        rb = results.offset().top + results.outerHeight();
        if (hb > rb) {
          results.scrollTop(results.scrollTop() + (hb - rb));
        }
        y = child.offset().top - results.offset().top;
        if (y < 0) {
          return results.scrollTop(results.scrollTop() + y);
        }
      };

      AbstractSelect2.prototype.moveHighlight = function(delta) {
        var choices, index, _results;
        choices = this.results.children(".select2-result");
        index = this.highlight();
        _results = [];
        while (index > -1 && index < choices.length) {
          index += delta;
          if (!$(choices[index]).hasClass("select2-disabled")) {
            this.highlight(index);
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      AbstractSelect2.prototype.highlight = function(index) {
        var choices;
        choices = this.results.children(".select2-result");
        if (arguments.length === 0) {
          return indexOf(choices.filter(".select2-highlighted")[0], choices.get());
        }
        choices.removeClass("select2-highlighted");
        if (index >= choices.length) {
          index = choices.length - 1;
        }
        if (index < 0) {
          index = 0;
        }
        $(choices[index]).addClass("select2-highlighted");
        this.ensureHighlightVisible();
        if (this.opened()) {
          return this.focusSearch();
        }
      };

      AbstractSelect2.prototype.highlightUnderEvent = function(event) {
        var el;
        el = $(event.target).closest(".select2-result");
        if (el.length > 0) {
          return this.highlight(el.index());
        }
      };

      AbstractSelect2.prototype.loadMoreIfNeeded = function() {
        var below, more, offset, page, results;
        results = this.results;
        more = results.find("li.select2-more-results");
        below = void 0;
        offset = -1;
        page = this.resultsPage + 1;
        if (more.length === 0) {
          return;
        }
        below = more.offset().top - results.offset().top - results.height();
        if (below <= 0) {
          more.addClass("select2-active");
          return this.opts.query({
            term: this.search.val(),
            page: page,
            callback: this.bind(function(data) {
              var parts, self;
              parts = [];
              self = this;
              $(data.results).each(function() {
                parts.push("<li class='select2-result'>");
                parts.push(self.opts.formatResult(this));
                return parts.push("</li>");
              });
              more.before(parts.join(""));
              results.find(".select2-result").each(function(i) {
                var e;
                e = $(this);
                if (e.data("select2-data") !== undefined) {
                  return offset = i;
                } else {
                  return e.data("select2-data", data.results[i - offset - 1]);
                }
              });
              if (data.more) {
                more.removeClass("select2-active");
              } else {
                more.remove();
              }
              return this.resultsPage = page;
            })
          });
        }
      };

      /*
      @param initial whether or not this is the call to this method right after the dropdown has been opened
      */


      AbstractSelect2.prototype.updateResults = function(initial) {
        var opts, render, results, search, self;
        render = function(html) {
          results.html(html);
          results.scrollTop(0);
          return search.removeClass("select2-active");
        };
        search = this.search;
        results = this.results;
        opts = this.opts;
        self = this;
        search.addClass("select2-active");
        if (search.val().length < opts.minimumInputLength) {
          render("<li class='select2-no-results'>" + opts.formatInputTooShort(search.val(), opts.minimumInputLength) + "</li>");
          return;
        }
        this.resultsPage = 1;
        return opts.query({
          term: search.val(),
          page: this.resultsPage,
          callback: this.bind(function(data) {
            var def, parts;
            parts = [];
            def = void 0;
            if (this.opts.createSearchChoice && search.val() !== "") {
              def = this.opts.createSearchChoice.call(null, search.val(), data.results);
              if (def !== undefined && def !== null && self.id(def) !== undefined && self.id(def) !== null) {
                if ($(data.results).filter(function() {
                  return equal(self.id(this), self.id(def));
                }).length === 0) {
                  data.results.unshift(def);
                }
              }
            }
            if (data.results.length === 0) {
              render("<li class='select2-no-results'>" + opts.formatNoMatches(search.val()) + "</li>");
              return;
            }
            $(data.results).each(function() {
              parts.push("<li class='select2-result'>");
              parts.push(opts.formatResult(this));
              return parts.push("</li>");
            });
            if (data.more === true) {
              parts.push("<li class='select2-more-results'>Loading more results...</li>");
            }
            render(parts.join(""));
            results.children(".select2-result").each(function(i) {
              var d;
              d = data.results[i];
              return $(this).data("select2-data", d);
            });
            return this.postprocessResults(data, initial);
          })
        });
      };

      AbstractSelect2.prototype.cancel = function() {
        return this.close();
      };

      AbstractSelect2.prototype.blur = function() {
        return window.setTimeout(this.bind(function() {
          this.close();
          this.container.removeClass("select2-container-active");
          this.clearSearch();
          this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
          return this.search.blur();
        }), 10);
      };

      AbstractSelect2.prototype.focusSearch = function() {
        return window.setTimeout(this.bind(function() {
          return this.search.focus();
        }), 10);
      };

      AbstractSelect2.prototype.selectHighlighted = function() {
        var data;
        data = this.results.find(".select2-highlighted:not(.select2-disabled)").data("select2-data");
        if (data) {
          return this.onSelect(data);
        }
      };

      AbstractSelect2.prototype.getPlaceholder = function() {
        return this.opts.element.attr("placeholder") || this.opts.element.data("placeholder") || this.opts.placeholder;
      };

      /*
      Get the desired width for the container element.  This is
      derived first from option `width` passed to select2, then
      the inline 'style' on the original element, and finally
      falls back to the jQuery calculated element width.
      
      @returns The width string (with units) for the container.
      */


      AbstractSelect2.prototype.getContainerWidth = function() {
        var attrs, i, l, matches, style;
        style = void 0;
        attrs = void 0;
        matches = void 0;
        i = void 0;
        l = void 0;
        if (this.opts.width !== undefined) {
          return this.opts.width;
        }
        style = this.opts.element.attr("style");
        if (style !== undefined) {
          attrs = style.split(";");
          i = 0;
          l = attrs.length;
          while (i < l) {
            matches = attrs[i].replace(/\s/g, "").match(/width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/);
            if (matches !== null && matches.length >= 1) {
              return matches[1];
            }
            i = i + 1;
          }
        }
        return this.opts.element.width() + "px";
      };

      return AbstractSelect2;

    })();
    SingleSelect2 = (function(_super) {

      __extends(SingleSelect2, _super);

      function SingleSelect2() {
        SingleSelect2.__super__.constructor.apply(this, arguments);
      }

      SingleSelect2.prototype.createContainer = function() {
        return $("<div></div>", {
          "class": "select2-container",
          style: "width: " + this.getContainerWidth()
        }).html("      <a href='javascript:void(0)' class='select2-choice'>\n<span></span><abbr class='select2-search-choice-close' style='display:none;'></abbr>\n<div><b></b></div>\n      </a>\n      <div class='select2-drop' style='display:none;'>\n<div class='select2-search'>\n  <input type='text' autocomplete='off'/>\n</div>\n<ul class='select2-results'>\n</ul>\n      </div>");
      };

      SingleSelect2.prototype.open = function() {
        if (this.opened()) {
          return;
        }
        return SingleSelect2.__super__.open.apply(this, arguments);
      };

      SingleSelect2.prototype.close = function() {
        if (!this.opened()) {
          return;
        }
        return SingleSelect2.__super__.close.apply(this, arguments);
      };

      SingleSelect2.prototype.focus = function() {
        this.close();
        return this.selection.focus();
      };

      SingleSelect2.prototype.isFocused = function() {
        return this.selection.is(":focus");
      };

      SingleSelect2.prototype.cancel = function() {
        SingleSelect2.__super__.cancel.apply(this, arguments);
        return this.selection.focus();
      };

      SingleSelect2.prototype.initContainer = function() {
        var clickingInside, container, selection, selector;
        selection = void 0;
        container = this.container;
        clickingInside = false;
        selector = ".select2-choice";
        this.selection = selection = container.find(selector);
        this.search.bind("keydown", this.bind(function(e) {
          switch (e.which) {
            case KEY.UP:
            case KEY.DOWN:
              this.moveHighlight((e.which === KEY.UP ? -1 : 1));
              killEvent(e);
              break;
            case KEY.TAB:
            case KEY.ENTER:
              this.selectHighlighted();
              killEvent(e);
              break;
            case KEY.ESC:
              this.cancel(e);
              e.preventDefault();
          }
        }));
        container.delegate(selector, "click", this.bind(function(e) {
          clickingInside = true;
          if (this.opened()) {
            this.close();
            selection.focus();
          } else {
            this.open();
          }
          e.preventDefault();
          return clickingInside = false;
        }));
        container.delegate(selector, "keydown", this.bind(function(e) {
          if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
            return;
          }
          this.open();
          if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN || e.which === KEY.SPACE) {
            killEvent(e);
          }
          if (e.which === KEY.ENTER) {
            return killEvent(e);
          }
        }));
        container.delegate(selector, "focus", function() {
          return container.addClass("select2-container-active");
        });
        container.delegate(selector, "blur", this.bind(function() {
          if (clickingInside) {
            return;
          }
          if (!this.opened()) {
            return this.blur();
          }
        }));
        selection.delegate("abbr", "click", this.bind(function(e) {
          this.val("");
          killEvent(e);
          this.close();
          return this.triggerChange();
        }));
        return this.setPlaceholder();
      };

      /*
      Sets selection based on source element's value
      */


      SingleSelect2.prototype.initSelection = function() {
        var selected;
        selected = void 0;
        if (this.opts.element.val() === "") {
          this.updateSelection({
            id: "",
            text: ""
          });
        } else {
          selected = this.opts.initSelection.call(null, this.opts.element);
          if (selected !== undefined && selected !== null) {
            this.updateSelection(selected);
          }
        }
        this.close();
        return this.setPlaceholder();
      };

      SingleSelect2.prototype.prepareOpts = function() {
        var opts;
        opts = SingleSelect2.__super__.prepareOpts.apply(this, arguments);
        if (opts.element.get(0).tagName.toLowerCase() === "select") {
          opts.initSelection = function(element) {
            var selected;
            selected = element.find(":selected");
            return {
              id: selected.attr("value"),
              text: selected.text()
            };
          };
        }
        return opts;
      };

      SingleSelect2.prototype.setPlaceholder = function() {
        var placeholder;
        placeholder = this.getPlaceholder();
        if (this.opts.element.val() === "" && placeholder !== undefined) {
          if (this.select && this.select.find("option:first").text() !== "") {
            return;
          }
          if (typeof placeholder === "object") {
            this.updateSelection(placeholder);
          } else {
            this.selection.find("span").html(placeholder);
          }
          this.selection.addClass("select2-default");
          return this.selection.find("abbr").hide();
        }
      };

      SingleSelect2.prototype.postprocessResults = function(data, initial) {
        var selected, self, showSearchInput;
        selected = 0;
        self = this;
        showSearchInput = true;
        this.results.find(".select2-result").each(function(i) {
          if (equal(self.id($(this).data("select2-data")), self.opts.element.val())) {
            selected = i;
            return false;
          }
        });
        this.highlight(selected);
        if (initial === true) {
          showSearchInput = data.results.length >= this.opts.minimumResultsForSearch;
          this.search.parent().toggle(showSearchInput);
          return this.container[(showSearchInput ? "addClass" : "removeClass")]("select2-with-searchbox");
        }
      };

      SingleSelect2.prototype.onSelect = function(data) {
        var old;
        old = this.opts.element.val();
        this.opts.element.val(this.id(data));
        this.updateSelection(data);
        this.close();
        this.selection.focus();
        if (!equal(old, this.id(data))) {
          return this.triggerChange();
        }
      };

      SingleSelect2.prototype.updateSelection = function(data) {
        this.selection.find("span").html(this.opts.formatSelection(data));
        this.selection.removeClass("select2-default");
        if (this.opts.allowClear && this.getPlaceholder() !== undefined) {
          return this.selection.find("abbr").show();
        }
      };

      SingleSelect2.prototype.val = function() {
        var data, val;
        val = void 0;
        data = null;
        if (arguments.length === 0) {
          return this.opts.element.val();
        }
        val = arguments[0];
        if (this.select) {
          this.select.val(val).find(":selected").each(function() {
            data = {
              id: $(this).attr("value"),
              text: $(this).text()
            };
            return false;
          });
          this.updateSelection(data);
        } else {
          this.opts.element.val((!val ? "" : this.id(val)));
          this.updateSelection(val);
        }
        return this.setPlaceholder();
      };

      SingleSelect2.prototype.clearSearch = function() {
        return this.search.val("");
      };

      return SingleSelect2;

    })(AbstractSelect2);
    MultiSelect2 = (function(_super) {

      __extends(MultiSelect2, _super);

      function MultiSelect2() {
        MultiSelect2.__super__.constructor.apply(this, arguments);
      }

      MultiSelect2.prototype.createContainer = function() {
        return $("<div></div>", {
          "class": "select2-container select2-container-multi",
          style: "width: " + this.getContainerWidth()
        }).html(["    <ul class='select2-choices'>", "  <li class='select2-search-field'>", "    <input type='text' autocomplete='off' style='width: 25px;'>", "  </li>", "</ul>", "<div class='select2-drop' style='display:none;'>", "   <ul class='select2-results'>", "   </ul>", "</div>"].join(""));
      };

      MultiSelect2.prototype.prepareOpts = function() {
        var opts;
        opts = MultiSelect2.__super__.prepareOpts.apply(this, arguments);
        opts = $.extend({}, {
          closeOnSelect: true
        }, opts);
        if (opts.element.get(0).tagName.toLowerCase() === "select") {
          opts.initSelection = function(element) {
            var data;
            data = [];
            element.find(":selected").each(function() {
              return data.push({
                id: $(this).attr("value"),
                text: $(this).text()
              });
            });
            return data;
          };
        }
        return opts;
      };

      MultiSelect2.prototype.initContainer = function() {
        var selection, selector;
        selector = ".select2-choices";
        selection = void 0;
        this.searchContainer = this.container.find(".select2-search-field");
        this.selection = selection = this.container.find(selector);
        this.search.bind("keydown", this.bind(function(e) {
          var choices, selected;
          if (e.which === KEY.BACKSPACE && this.search.val() === "") {
            this.close();
            choices = void 0;
            selected = selection.find(".select2-search-choice-focus");
            if (selected.length > 0) {
              this.unselect(selected.first());
              this.search.width(10);
              killEvent(e);
              return;
            }
            choices = selection.find(".select2-search-choice");
            if (choices.length > 0) {
              choices.last().addClass("select2-search-choice-focus");
            }
          } else {
            selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
          }
          if (this.opened()) {
            switch (e.which) {
              case KEY.UP:
              case KEY.DOWN:
                this.moveHighlight((e.which === KEY.UP ? -1 : 1));
                killEvent(e);
                return;
              case KEY.ENTER:
              case KEY.TAB:
                this.selectHighlighted();
                killEvent(e);
                return;
              case KEY.ESC:
                this.cancel(e);
                e.preventDefault();
                return;
            }
          }
          if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.BACKSPACE || e.which === KEY.ESC) {
            return;
          }
          this.open();
          if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {
            return killEvent(e);
          }
        }));
        this.search.bind("keyup", this.bind(this.resizeSearch));
        this.container.delegate(selector, "click", this.bind(function(e) {
          this.open();
          this.focusSearch();
          return e.preventDefault();
        }));
        this.container.delegate(selector, "focus", this.bind(function() {
          this.container.addClass("select2-container-active");
          return this.clearPlaceholder();
        }));
        return this.clearSearch();
      };

      MultiSelect2.prototype.initSelection = function() {
        var data;
        data = void 0;
        if (this.opts.element.val() === "") {
          this.updateSelection([]);
        }
        if (this.select || this.opts.element.val() !== "") {
          data = this.opts.initSelection.call(null, this.opts.element);
          if (data !== undefined && data !== null) {
            this.updateSelection(data);
          }
        }
        this.close();
        return this.clearSearch();
      };

      MultiSelect2.prototype.clearSearch = function() {
        var placeholder;
        placeholder = this.getPlaceholder();
        if (placeholder !== undefined && this.getVal().length === 0 && this.search.hasClass("select2-focused") === false) {
          this.search.val(placeholder).addClass("select2-default");
          return this.search.width(this.getContainerWidth());
        } else {
          return this.search.val("").width(10);
        }
      };

      MultiSelect2.prototype.clearPlaceholder = function() {
        if (this.search.hasClass("select2-default")) {
          return this.search.val("").removeClass("select2-default");
        }
      };

      MultiSelect2.prototype.open = function() {
        if (this.opened()) {
          return;
        }
        MultiSelect2.__super__.open.apply(this, arguments);
        this.resizeSearch();
        return this.focusSearch();
      };

      MultiSelect2.prototype.close = function() {
        if (!this.opened()) {
          return;
        }
        return MultiSelect2.__super__.close.apply(this, arguments);
      };

      MultiSelect2.prototype.focus = function() {
        this.close();
        return this.search.focus();
      };

      MultiSelect2.prototype.isFocused = function() {
        return this.search.hasClass("select2-focused");
      };

      MultiSelect2.prototype.updateSelection = function(data) {
        var filtered, ids, self;
        ids = [];
        filtered = [];
        self = this;
        $(data).each(function() {
          if (indexOf(self.id(this), ids) < 0) {
            ids.push(self.id(this));
            return filtered.push(this);
          }
        });
        data = filtered;
        this.selection.find(".select2-search-choice").remove();
        $(data).each(function() {
          return self.addSelectedChoice(this);
        });
        return self.postprocessResults();
      };

      MultiSelect2.prototype.onSelect = function(data) {
        this.addSelectedChoice(data);
        if (this.select) {
          this.postprocessResults();
        }
        if (this.opts.closeOnSelect) {
          this.close();
          this.search.width(10);
        } else {
          this.search.width(10);
          this.resizeSearch();
        }
        this.triggerChange();
        return this.focusSearch();
      };

      MultiSelect2.prototype.cancel = function() {
        this.close();
        return this.focusSearch();
      };

      MultiSelect2.prototype.addSelectedChoice = function(data) {
        var choice, id, parts, val;
        choice = void 0;
        id = this.id(data);
        parts = void 0;
        val = this.getVal();
        parts = ["<li class='select2-search-choice'>", this.opts.formatSelection(data), "<a href='javascript:void(0)' class='select2-search-choice-close' tabindex='-1'></a>", "</li>"];
        choice = $(parts.join(""));
        choice.find("a").bind("click dblclick", this.bind(function(e) {
          this.unselect($(e.target));
          this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
          killEvent(e);
          this.close();
          return this.focusSearch();
        })).bind("focus", this.bind(function() {
          return this.container.addClass("select2-container-active");
        }));
        choice.data("select2-data", data);
        choice.insertBefore(this.searchContainer);
        val.push(id);
        return this.setVal(val);
      };

      MultiSelect2.prototype.unselect = function(selected) {
        var index, val;
        val = this.getVal();
        index = void 0;
        selected = selected.closest(".select2-search-choice");
        if (selected.length === 0) {
          throw "Invalid argument: " + selected + ". Must be .select2-search-choice";
        }
        index = indexOf(this.id(selected.data("select2-data")), val);
        if (index >= 0) {
          val.splice(index, 1);
          this.setVal(val);
          if (this.select) {
            this.postprocessResults();
          }
        }
        selected.remove();
        return this.triggerChange();
      };

      MultiSelect2.prototype.postprocessResults = function() {
        var choices, self, val;
        val = this.getVal();
        choices = this.results.find(".select2-result");
        self = this;
        choices.each(function() {
          var choice, id;
          choice = $(this);
          id = self.id(choice.data("select2-data"));
          if (indexOf(id, val) >= 0) {
            return choice.addClass("select2-disabled");
          } else {
            return choice.removeClass("select2-disabled");
          }
        });
        return choices.each(function(i) {
          if (!$(this).hasClass("select2-disabled")) {
            self.highlight(i);
            return false;
          }
        });
      };

      MultiSelect2.prototype.resizeSearch = function() {
        var containerLeft, left, maxWidth, minimumWidth, searchWidth;
        minimumWidth = void 0;
        left = void 0;
        maxWidth = void 0;
        containerLeft = void 0;
        searchWidth = void 0;
        minimumWidth = measureTextWidth(this.search) + 10;
        left = this.search.offset().left;
        maxWidth = this.selection.width();
        containerLeft = this.selection.offset().left;
        searchWidth = maxWidth - (left - containerLeft) - getSideBorderPadding(this.search);
        if (searchWidth < minimumWidth) {
          searchWidth = maxWidth - getSideBorderPadding(this.search);
        }
        if (searchWidth < 40) {
          searchWidth = maxWidth - getSideBorderPadding(this.search);
        }
        return this.search.width(searchWidth);
      };

      MultiSelect2.prototype.getVal = function() {
        var val;
        val = void 0;
        if (this.select) {
          val = this.select.val();
          if (val === null) {
            return [];
          } else {
            return val;
          }
        } else {
          val = this.opts.element.val();
          return splitVal(val, ",");
        }
      };

      MultiSelect2.prototype.setVal = function(val) {
        var unique;
        unique = [];
        if (this.select) {
          return this.select.val(val);
        } else {
          $(val).each(function() {
            if (indexOf(this, unique) < 0) {
              return unique.push(this);
            }
          });
          return this.opts.element.val((unique.length === 0 ? "" : unique.join(",")));
        }
      };

      MultiSelect2.prototype.val = function() {
        var data, self, val;
        val = void 0;
        data = [];
        self = this;
        if (arguments.length === 0) {
          return this.getVal();
        }
        val = arguments[0];
        if (this.select) {
          this.setVal(val);
          this.select.find(":selected").each(function() {
            return data.push({
              id: $(this).attr("value"),
              text: $(this).text()
            });
          });
          this.updateSelection(data);
        } else {
          val = (val === null ? [] : val);
          this.setVal(val);
          $(val).each(function() {
            return data.push(self.id(this));
          });
          this.setVal(data);
          this.updateSelection(val);
        }
        return this.clearSearch();
      };

      return MultiSelect2;

    })(AbstractSelect2);
    $.fn.select2 = function() {
      var allowedMethods, args, multiple, opts, select2, value;
      args = Array.prototype.slice.call(arguments, 0);
      opts = void 0;
      select2 = void 0;
      value = void 0;
      multiple = void 0;
      allowedMethods = ["val", "destroy", "open", "close", "focus", "isFocused"];
      this.each(function() {
        if (args.length === 0 || typeof args[0] === "object") {
          opts = (args.length === 0 ? {} : $.extend({}, args[0]));
          opts.element = $(this);
          if (opts.element.get(0).tagName.toLowerCase() === "select") {
            multiple = opts.element.attr("multiple");
          } else {
            multiple = opts.multiple || false;
            if ("tags" in opts) {
              opts.multiple = multiple = true;
            }
          }
          select2 = (multiple ? new MultiSelect2() : new SingleSelect2());
          return select2.init(opts);
        } else if (typeof args[0] === "string") {
          if (indexOf(args[0], allowedMethods) < 0) {
            throw "Unknown method: " + args[0];
          }
          value = undefined;
          select2 = $(this).data("select2");
          if (select2 === undefined) {
            return;
          }
          value = select2[args[0]].apply(select2, args.slice(1));
          if (value !== undefined) {
            return false;
          }
        } else {
          throw "Invalid arguments to select2 plugin: " + args;
        }
      });
      if (value === undefined) {
        return this;
      } else {
        return value;
      }
    };
    return window.Select2 = {
      query: {
        ajax: ajax,
        local: local,
        tags: tags
      },
      util: {
        debounce: debounce
      },
      "class": {
        abstract: AbstractSelect2,
        single: SingleSelect2,
        multi: MultiSelect2
      }
    };
  })(jQuery);

}).call(this);
